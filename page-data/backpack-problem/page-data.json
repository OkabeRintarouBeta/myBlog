{
    "componentChunkName": "component---src-templates-post-template-jsx",
    "path": "/backpack-problem/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Category</h2>\n<img src=\"../images/leetcode/backpack/category.png\">\n<h2>01 Backpack</h2>\n<h3>2D dynamic programming</h3>\n<table>\n<thead>\n<tr>\n<th>object\\weight</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>object0</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>object1</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>object2</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>object3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>dp[i][j] :  the total value when choosing between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>−</mo><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">0 - i ^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span></span> object, reaching weight j</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">]</mo><mo>+</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">])</span></span></span></span></span></p>\n<ol>\n<li>Boundary Cases\n<ol>\n<li>no weight, traverse till the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">i^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span></span> object</li>\n<li>only the 0th object\n<ol>\n<li>when j&#x3C;weight[0], dp[0][j]=0</li>\n<li>when j>=weight[0],dp[0][j]=value[i];</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Traverse Order\n<ul>\n<li>both object-first and bag-first are OK for 01 backpack\n<ul>\n<li>why? they both visit the upper and upper-left of the array for a given block</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Sample Code\n<pre><code class=\"language-C++\"> for(int i = 1; i &#x3C; weight.size(); i++) {\n   for(int j = 0; j &#x3C;= bagweight; j++) {\n       if (j &#x3C; weight[i]) dp[i][j] = dp[i - 1][j];\n       else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n   }\n }\n</code></pre>\n</li>\n</ol>\n<h3>1D Dynamic Programming</h3>\n<ol>\n<li>Boundary Case:none, just initialize dp[i]=0</li>\n<li>Code\n<pre><code class=\"language-C++\"> for(int i = 0; i &#x3C; weight.size(); i++) {\n   for(int j = bagWeight; j >= weight[i]; j--) {\n       dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n   }\n }\n</code></pre>\n<ul>\n<li>Notice that bag weight is traversed in reverse order, this could make sure that each item is only used for one time.</li>\n<li>Can we reverse the order of objects and bag weight?\n<ul>\n<li>No!</li>\n<li>Based on the value in the top-left, we decide the value in the bottom-right, therefore we have to make sure that the value in the upper-left is not changed.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3>Example Problems</h3>\n<h4>416. Partition Equal Subset Sum</h4>\n<p><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/description/\">link</a></p>\n<h4>1049. Last Stone Weight II</h4>\n<p><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">link</a></p>\n<ul>\n<li>Take both value and weight to be stone weight</li>\n<li>Try to split the stones to two parts with the closest weight sum(value)</li>\n</ul>\n<h4>474. Ones and Zeros</h4>\n<p><a href=\"https://leetcode.com/problems/ones-and-zeroes/\">link</a></p>\n<h4>494. Target Sum</h4>\n<p><a href=\"https://leetcode.com/problems/target-sum/\">link</a></p>\n<ul>\n<li>HINT;\n<ul>\n<li>the number of ways to get x is the same as the number of ways to get -x(just switch \"+\" and \"-\")</li>\n</ul>\n</li>\n</ul>\n<h2>Complete Backpack</h2>\n<ul>\n<li>\n<p>Different from 01 backpack, each item could be used for many times.</p>\n<p>Therefore, the only difference in code is traversing the bag weight from small to large.</p>\n</li>\n<li>\n<p>Code</p>\n<pre><code class=\"language-C++\">for(int i = 0; i &#x3C; weight.size(); i++) { \n  for(int j = weight[i]; j &#x3C;= bagWeight ; j++) {\n      dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n  }\n}\n</code></pre>\n<p>The order for two for-loops could switch</p>\n</li>\n</ul>","timeToRead":3,"excerpt":"Category 01 Backpack 2D dynamic programming object\\weight 0 1 2 object0    object1    object2    object3    dp[i][j] :  the total value when…","frontmatter":{"title":"Backpack Problem","date":"2018-07-02T08:00:00Z","categories":["leetcode","interview"],"tags":["backpack problem","dynamic programming"],"description":"01 and complete backpack basics and examples on leetcode","keywords":null,"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#384858","images":{"fallback":{"src":"/myBlog/static/a61819b7e85e7d5ab33db828f1269d33/bc51f/placeholder-660x400-344359.png","srcSet":"/myBlog/static/a61819b7e85e7d5ab33db828f1269d33/bc51f/placeholder-660x400-344359.png 660w","sizes":"660px"},"sources":[{"srcSet":"/myBlog/static/a61819b7e85e7d5ab33db828f1269d33/2b2b5/placeholder-660x400-344359.webp 660w","type":"image/webp","sizes":"660px"}]},"width":660,"height":400}}}},"fields":{"slug":"/backpack-problem/","date":"2018-07-02T08:00:00.000Z"}}},"pageContext":{"slug":"/backpack-problem/","nexttitle":"Big Test 1","nextslug":"/big-sample-test-1/","prevtitle":"[SudoCode]System Design Course p1-5 notes","prevslug":"/system-design-notes-1-5/","tagList":["proxy","server","data flow","backpack problem","dynamic programming","test","huge","common tag","say hi","cheese","other","tag","something","tagging","programming","stuff"],"categoryList":["system design","interview","leetcode","moar","tech","basic category","something","random","test3","another one"],"latestPostEdges":[{"node":{"fields":{"slug":"/system-design-notes-1-5/"},"frontmatter":{"template":"post","title":"[SudoCode]System Design Course p1-5 notes","tags":["proxy","server","data flow"],"categories":["system design","interview"],"date":"2023-07-03T08:00:00Z"}}},{"node":{"fields":{"slug":"/backpack-problem/"},"frontmatter":{"template":"post","title":"Backpack Problem","tags":["backpack problem","dynamic programming"],"categories":["leetcode","interview"],"date":"2018-07-02T08:00:00Z"}}},{"node":{"fields":{"slug":"/big-sample-test-1/"},"frontmatter":{"template":"post","title":"Big Test 1","tags":["test","huge","common tag"],"categories":["moar","tech","basic category"],"date":"2018-07-01T08:00:00Z"}}},{"node":{"fields":{"slug":"/the-fairys-witches-2/"},"frontmatter":{"template":"post","title":"The Fairy's Witches 2","tags":["common tag"],"categories":["something","basic category"],"date":"2017-04-03T08:00:00Z"}}},{"node":{"fields":{"slug":"/the-fairys-witches-1/"},"frontmatter":{"template":"post","title":"The Fairy's Witches 1","tags":["common tag"],"categories":["something","basic category"],"date":"2017-04-02T08:00:00Z"}}},{"node":{"fields":{"slug":"/random-project-4-with-super-long-title-phase-one/"},"frontmatter":{"template":"post","title":"Random project 4 With Super Long Title Phase One","tags":["say hi","common tag"],"categories":["random","test3","basic category"],"date":"2017-03-02T08:00:00Z"}}},{"node":{"fields":{"slug":"/angels-of-mist/"},"frontmatter":{"template":"post","title":"Angels of Mist","tags":["cheese","other","common tag"],"categories":["test3","basic category"],"date":"2017-03-01T20:00:00Z"}}},{"node":{"fields":{"slug":"/birch-in-the-roses/"},"frontmatter":{"template":"post","title":"Birch in the Roses","tags":["tag","common tag"],"categories":["tech","basic category"],"date":"2017-03-01T08:00:00Z"}}}]}},
    "staticQueryHashes": []}